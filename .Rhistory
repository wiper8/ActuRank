theme_bw()+
geom_line(aes(x=date, y=score, col=player), linewidth=1)+
geom_point(aes(x=date, y=score, col=player), data=graph_data[graph_data$played, ])+
scale_color_discrete(breaks = graph_data[order(graph_data[graph_data[, 1] == max(graph_data[, 1]), "score"], decreasing = T), "player"])+
coord_cartesian(xlim = c(min(as.Date(scores$date)), max(as.Date(scores$date))))+
ylab("Elo")
scores_stats(scores, players)
show_current_ranking(clusters, scores, show_credibility = TRUE)
show_detailed_skill_per_player(players)
dataset <- "ping"
granularity_level <- 3
ping_granularity <- data.frame(
level = c(1, 2, 3, 4),
# TODO
dim_len_mu = c(10, 15, 20, 30), #TODO les 3 derniers
seuil_freq = c(0, 20, 50, 300)
)
if (dataset == "spike") {
include_exact_points <- TRUE
dim_len_mu <- 20
}
if (dataset == "pickle") {
include_exact_points <- TRUE
dim_len_mu <- 30
}
if (dataset == "ping") {
source("src/import_ping.R")
# retirer vieux data
scores <- scores[scores$date >= as.Date("2024-01-01"), ]
#TODO essayer dajouter 10 wins de xav contre vic pour voir cque ca fait
} else if (dataset == "spike") {
source("src/import_spike.R")
} else if (dataset == "pickle") {
source("src/import_pickle.R")
source("src/pickle.R")
}
if (!"serve_for_pt" %in% colnames(scores)) {
scores$serve_for_pt <- FALSE
}
source("src/update_scores.R")
source("src/plots.R")
source("src/recommend.R")
scores_stats(scores, players)
nrow(scores)
sum(scores$score_A + scores$score_B)
games_matchups(scores, players)
set.seed(2024L)
if (dataset == "ping") {
include_exact_points <- FALSE
dim_len_mu <- ping_granularity[granularity_level, "dim_len_mu"]
seuil_freq <- ping_granularity[granularity_level, "seuil_freq"]
names_peu_freq <- scores_stats(scores, players)$games_played
names_peu_freq <- names(names_peu_freq[names_peu_freq <= seuil_freq])
scores <- scores[apply(scores[, 2:5], 1, function(x) !any(x %in% names_peu_freq)), ]
}
scores_stats(scores, players)
# generate_GIF_images(scores)
tmp <- show_ranking_history_dependancy(scores, dataset)
players <- tmp[[1]]
graph_data <- tmp[[2]]
clusters <- tmp[[3]]
# score history
ggplot(graph_data)+
theme_bw()+
geom_line(aes(x=date, y=score, col=player), linewidth=1)+
geom_point(aes(x=date, y=score, col=player), data=graph_data[graph_data$played, ])+
scale_color_discrete(breaks = graph_data[order(graph_data[graph_data[, 1] == max(graph_data[, 1]), "score"], decreasing = T), "player"])+
coord_cartesian(xlim = c(min(as.Date(scores$date)), max(as.Date(scores$date))))+
ylab("Elo")
ggplot(graph_data)+
theme_bw()+
geom_line(aes(x=date, y=skill, col=player), linewidth=1)+
geom_point(aes(x=date, y=skill, col=player), data=graph_data[graph_data$played, ])+
scale_color_discrete(breaks = graph_data[order(graph_data[graph_data[, 1] == max(graph_data[, 1]), "score"], decreasing = T), "player"])+
coord_cartesian(xlim = c(min(as.Date(scores$date)), max(as.Date(scores$date))))
# ranking history
ggplot(graph_data)+
theme_bw()+
geom_line(aes(x=day_i, y=rank, col=player), linewidth=1)+
geom_point(aes(x=day_i, y=rank, col=player), data=graph_data[graph_data$played, ])+
scale_color_discrete(breaks = graph_data[order(graph_data[graph_data[, 1] == max(graph_data[, 1]), "score"], decreasing = T), "player"])+
theme(panel.grid.minor = element_blank())+
scale_x_continuous(breaks = 1:max(graph_data[, "day_i"], na.rm = TRUE))+
scale_y_reverse(breaks = 1:max(graph_data[, "rank"], na.rm = TRUE))
ggplot(graph_data)+
theme_bw()+
geom_line(aes(x=day_i, y=rank_skill, col=player), linewidth=1)+
geom_point(aes(x=day_i, y=rank_skill, col=player), data=graph_data[graph_data$played, ])+
scale_color_discrete(breaks = graph_data[order(graph_data[graph_data[, 1] == max(graph_data[, 1]), "score"], decreasing = T), "player"])+
theme(panel.grid.minor = element_blank())+
scale_x_continuous(breaks = 1:max(graph_data[, "day_i"], na.rm = TRUE))+
scale_y_reverse(breaks = 1:max(graph_data[, "rank_skill"], na.rm = TRUE))
ggplot(graph_data)+
theme_bw()+
geom_line(aes(x=day_i, y=credibility, col=player), linewidth=1)+
geom_point(aes(x=day_i, y=credibility, col=player), data=graph_data[graph_data$played, ])+
scale_color_discrete(breaks = graph_data[order(graph_data[graph_data[, 1] == max(graph_data[, 1]), "score"], decreasing = T), "player"])+
theme(panel.grid.minor = element_blank())+
scale_x_continuous(breaks = 1:max(graph_data[, "day_i"], na.rm = TRUE))+
ylim(0, 1)
sort(
sapply(
clusters,
function(distr) compute_multivariate_credibility(distr$joint_distr)),
decreasing = TRUE
)
show_current_ranking(clusters, scores)
show_current_ranking(clusters, scores, show_credibility = TRUE)
show_detailed_skill_per_player(players)
test_hyp(clusters)
show_current_ranking(clusters, scores, show_credibility = TRUE)
scores
dataset <- "ping"
granularity_level <- 3
ping_granularity <- data.frame(
level = c(1, 2, 3, 4),
# TODO
dim_len_mu = c(10, 15, 25, 35), #TODO les 3 derniers
seuil_freq = c(0, 20, 50, 300)
)
if (dataset == "spike") {
include_exact_points <- TRUE
dim_len_mu <- 20
}
if (dataset == "pickle") {
include_exact_points <- TRUE
dim_len_mu <- 30
}
if (dataset == "ping") {
source("src/import_ping.R")
# retirer vieux data
scores <- scores[scores$date >= as.Date("2024-01-01"), ]
#TODO essayer dajouter 10 wins de xav contre vic pour voir cque ca fait
} else if (dataset == "spike") {
source("src/import_spike.R")
} else if (dataset == "pickle") {
source("src/import_pickle.R")
source("src/pickle.R")
}
if (!"serve_for_pt" %in% colnames(scores)) {
scores$serve_for_pt <- FALSE
}
source("src/update_scores.R")
source("src/plots.R")
source("src/recommend.R")
scores_stats(scores, players)
nrow(scores)
sum(scores$score_A + scores$score_B)
games_matchups(scores, players)
set.seed(2024L)
if (dataset == "ping") {
include_exact_points <- FALSE
dim_len_mu <- ping_granularity[granularity_level, "dim_len_mu"]
seuil_freq <- ping_granularity[granularity_level, "seuil_freq"]
names_peu_freq <- scores_stats(scores, players)$games_played
names_peu_freq <- names(names_peu_freq[names_peu_freq <= seuil_freq])
scores <- scores[apply(scores[, 2:5], 1, function(x) !any(x %in% names_peu_freq)), ]
}
# generate_GIF_images(scores)
tmp <- show_ranking_history_dependancy(scores, dataset)
players <- tmp[[1]]
graph_data <- tmp[[2]]
clusters <- tmp[[3]]
# score history
ggplot(graph_data)+
theme_bw()+
geom_line(aes(x=date, y=score, col=player), linewidth=1)+
geom_point(aes(x=date, y=score, col=player), data=graph_data[graph_data$played, ])+
scale_color_discrete(breaks = graph_data[order(graph_data[graph_data[, 1] == max(graph_data[, 1]), "score"], decreasing = T), "player"])+
coord_cartesian(xlim = c(min(as.Date(scores$date)), max(as.Date(scores$date))))+
ylab("Elo")
dataset <- "ping"
granularity_level <- 3
ping_granularity <- data.frame(
level = c(1, 2, 3, 4),
# TODO
dim_len_mu = c(10, 15, 30, 40), #TODO les 3 derniers
seuil_freq = c(0, 20, 50, 300)
)
if (dataset == "spike") {
include_exact_points <- TRUE
dim_len_mu <- 20
}
if (dataset == "pickle") {
include_exact_points <- TRUE
dim_len_mu <- 30
}
if (dataset == "ping") {
source("src/import_ping.R")
# retirer vieux data
scores <- scores[scores$date >= as.Date("2024-01-01"), ]
#TODO essayer dajouter 10 wins de xav contre vic pour voir cque ca fait
} else if (dataset == "spike") {
source("src/import_spike.R")
} else if (dataset == "pickle") {
source("src/import_pickle.R")
source("src/pickle.R")
}
if (!"serve_for_pt" %in% colnames(scores)) {
scores$serve_for_pt <- FALSE
}
source("src/update_scores.R")
source("src/plots.R")
source("src/recommend.R")
scores_stats(scores, players)
nrow(scores)
sum(scores$score_A + scores$score_B)
games_matchups(scores, players)
set.seed(2024L)
if (dataset == "ping") {
include_exact_points <- FALSE
dim_len_mu <- ping_granularity[granularity_level, "dim_len_mu"]
seuil_freq <- ping_granularity[granularity_level, "seuil_freq"]
names_peu_freq <- scores_stats(scores, players)$games_played
names_peu_freq <- names(names_peu_freq[names_peu_freq <= seuil_freq])
scores <- scores[apply(scores[, 2:5], 1, function(x) !any(x %in% names_peu_freq)), ]
}
# generate_GIF_images(scores)
tmp <- show_ranking_history_dependancy(scores, dataset)
players <- tmp[[1]]
graph_data <- tmp[[2]]
clusters <- tmp[[3]]
# score history
ggplot(graph_data)+
theme_bw()+
geom_line(aes(x=date, y=score, col=player), linewidth=1)+
geom_point(aes(x=date, y=score, col=player), data=graph_data[graph_data$played, ])+
scale_color_discrete(breaks = graph_data[order(graph_data[graph_data[, 1] == max(graph_data[, 1]), "score"], decreasing = T), "player"])+
coord_cartesian(xlim = c(min(as.Date(scores$date)), max(as.Date(scores$date))))+
ylab("Elo")
scores_stats(scores, players)
players <- tmp[[1]]
graph_data <- tmp[[2]]
clusters <- tmp[[3]]
# score history
ggplot(graph_data)+
theme_bw()+
geom_line(aes(x=date, y=score, col=player), linewidth=1)+
geom_point(aes(x=date, y=score, col=player), data=graph_data[graph_data$played, ])+
scale_color_discrete(breaks = graph_data[order(graph_data[graph_data[, 1] == max(graph_data[, 1]), "score"], decreasing = T), "player"])+
coord_cartesian(xlim = c(min(as.Date(scores$date)), max(as.Date(scores$date))))+
ylab("Elo")
ggplot(graph_data)+
theme_bw()+
geom_line(aes(x=day_i, y=credibility, col=player), linewidth=1)+
geom_point(aes(x=day_i, y=credibility, col=player), data=graph_data[graph_data$played, ])+
scale_color_discrete(breaks = graph_data[order(graph_data[graph_data[, 1] == max(graph_data[, 1]), "score"], decreasing = T), "player"])+
theme(panel.grid.minor = element_blank())+
scale_x_continuous(breaks = 1:max(graph_data[, "day_i"], na.rm = TRUE))+
ylim(0, 1)
show_current_ranking(clusters, scores, show_credibility = TRUE)
show_detailed_skill_per_player(players)
dataset <- "ping"
granularity_level <- 4
ping_granularity <- data.frame(
level = c(1, 2, 3, 4),
# TODO
dim_len_mu = c(10, 15, 30, 45), #TODO les 3 derniers
seuil_freq = c(0, 20, 50, 300)
)
if (dataset == "spike") {
include_exact_points <- TRUE
dim_len_mu <- 20
}
if (dataset == "pickle") {
include_exact_points <- TRUE
dim_len_mu <- 30
}
if (dataset == "ping") {
source("src/import_ping.R")
# retirer vieux data
scores <- scores[scores$date >= as.Date("2024-01-01"), ]
#TODO essayer dajouter 10 wins de xav contre vic pour voir cque ca fait
} else if (dataset == "spike") {
source("src/import_spike.R")
} else if (dataset == "pickle") {
source("src/import_pickle.R")
source("src/pickle.R")
}
if (!"serve_for_pt" %in% colnames(scores)) {
scores$serve_for_pt <- FALSE
}
source("src/update_scores.R")
source("src/plots.R")
source("src/recommend.R")
set.seed(2024L)
if (dataset == "ping") {
include_exact_points <- FALSE
dim_len_mu <- ping_granularity[granularity_level, "dim_len_mu"]
seuil_freq <- ping_granularity[granularity_level, "seuil_freq"]
names_peu_freq <- scores_stats(scores, players)$games_played
names_peu_freq <- names(names_peu_freq[names_peu_freq <= seuil_freq])
scores <- scores[apply(scores[, 2:5], 1, function(x) !any(x %in% names_peu_freq)), ]
}
# generate_GIF_images(scores)
tmp <- show_ranking_history_dependancy(scores, dataset)
dataset <- "ping"
granularity_level <- 4
ping_granularity <- data.frame(
level = c(1, 2, 3, 4),
# TODO
dim_len_mu = c(10, 15, 25, 40), #TODO les 3 derniers
seuil_freq = c(0, 20, 50, 300)
)
if (dataset == "spike") {
include_exact_points <- TRUE
dim_len_mu <- 20
}
if (dataset == "pickle") {
include_exact_points <- TRUE
dim_len_mu <- 30
}
if (dataset == "ping") {
source("src/import_ping.R")
# retirer vieux data
scores <- scores[scores$date >= as.Date("2024-01-01"), ]
#TODO essayer dajouter 10 wins de xav contre vic pour voir cque ca fait
} else if (dataset == "spike") {
source("src/import_spike.R")
} else if (dataset == "pickle") {
source("src/import_pickle.R")
source("src/pickle.R")
}
if (!"serve_for_pt" %in% colnames(scores)) {
scores$serve_for_pt <- FALSE
}
source("src/update_scores.R")
source("src/plots.R")
source("src/recommend.R")
scores_stats(scores, players)
nrow(scores)
sum(scores$score_A + scores$score_B)
games_matchups(scores, players)
set.seed(2024L)
if (dataset == "ping") {
include_exact_points <- FALSE
dim_len_mu <- ping_granularity[granularity_level, "dim_len_mu"]
seuil_freq <- ping_granularity[granularity_level, "seuil_freq"]
names_peu_freq <- scores_stats(scores, players)$games_played
names_peu_freq <- names(names_peu_freq[names_peu_freq <= seuil_freq])
scores <- scores[apply(scores[, 2:5], 1, function(x) !any(x %in% names_peu_freq)), ]
}
scores_stats(scores, players)
# generate_GIF_images(scores)
tmp <- show_ranking_history_dependancy(scores, dataset)
dataset <- "ping"
granularity_level <- 4
ping_granularity <- data.frame(
level = c(1, 2, 3, 4),
# TODO
dim_len_mu = c(10, 15, 25, 35), #TODO les 3 derniers
seuil_freq = c(0, 20, 50, 300)
)
35*35/40/40
dataset <- "ping"
granularity_level <- 4
ping_granularity <- data.frame(
level = c(1, 2, 3, 4),
# TODO
dim_len_mu = c(10, 15, 25, 35), #TODO les 3 derniers
seuil_freq = c(0, 20, 50, 300)
)
if (dataset == "spike") {
include_exact_points <- TRUE
dim_len_mu <- 20
}
if (dataset == "pickle") {
include_exact_points <- TRUE
dim_len_mu <- 30
}
if (dataset == "ping") {
source("src/import_ping.R")
# retirer vieux data
scores <- scores[scores$date >= as.Date("2024-01-01"), ]
#TODO essayer dajouter 10 wins de xav contre vic pour voir cque ca fait
} else if (dataset == "spike") {
source("src/import_spike.R")
} else if (dataset == "pickle") {
source("src/import_pickle.R")
source("src/pickle.R")
}
dataset <- "ping"
granularity_level <- 4
ping_granularity <- data.frame(
level = c(1, 2, 3, 4),
# TODO
dim_len_mu = c(10, 15, 25, 35), #TODO les 3 derniers
seuil_freq = c(0, 20, 50, 300)
)
if (dataset == "spike") {
include_exact_points <- TRUE
dim_len_mu <- 20
}
if (dataset == "pickle") {
include_exact_points <- TRUE
dim_len_mu <- 30
}
if (dataset == "ping") {
source("src/import_ping.R")
# retirer vieux data
scores <- scores[scores$date >= as.Date("2024-01-01"), ]
#TODO essayer dajouter 10 wins de xav contre vic pour voir cque ca fait
} else if (dataset == "spike") {
source("src/import_spike.R")
} else if (dataset == "pickle") {
source("src/import_pickle.R")
source("src/pickle.R")
}
source("src/import_ping.R")
source("C:/Users/phbro/Desktop/DOCUMENTS/ActuRank/main_dependancy.R")
dataset <- "ping"
granularity_level <- 4
ping_granularity <- data.frame(
level = c(1, 2, 3, 4),
# TODO
dim_len_mu = c(10, 15, 25, 35), #TODO les 3 derniers
seuil_freq = c(0, 20, 50, 300)
)
ping_granularity
dim_len_mu <- ping_granularity[granularity_level, "dim_len_mu"]
dim_len_mu
if (dataset == "spike") {
include_exact_points <- TRUE
dim_len_mu <- 20
}
if (dataset == "pickle") {
include_exact_points <- TRUE
dim_len_mu <- 30
}
if (dataset == "ping") {
source("src/import_ping.R")
# retirer vieux data
scores <- scores[scores$date >= as.Date("2024-01-01"), ]
#TODO essayer dajouter 10 wins de xav contre vic pour voir cque ca fait
} else if (dataset == "spike") {
source("src/import_spike.R")
} else if (dataset == "pickle") {
source("src/import_pickle.R")
source("src/pickle.R")
}
if (!"serve_for_pt" %in% colnames(scores)) {
scores$serve_for_pt <- FALSE
}
source("src/update_scores.R")
source("src/plots.R")
source("src/recommend.R")
source("src/update_scores.R")
dataset <- "ping"
granularity_level <- 4
ping_granularity <- data.frame(
level = c(1, 2, 3, 4),
# TODO
dim_len_mu = c(10, 15, 25, 35), #TODO les 3 derniers
seuil_freq = c(0, 20, 50, 300)
)
if (dataset == "ping") {
include_exact_points <- FALSE
seuil_freq <- ping_granularity[granularity_level, "seuil_freq"]
dim_len_mu <- ping_granularity[granularity_level, "dim_len_mu"]
}
if (dataset == "spike") {
include_exact_points <- TRUE
dim_len_mu <- 20
}
if (dataset == "pickle") {
include_exact_points <- TRUE
dim_len_mu <- 30
}
if (dataset == "ping") {
source("src/import_ping.R")
# retirer vieux data
scores <- scores[scores$date >= as.Date("2024-01-01"), ]
#TODO essayer dajouter 10 wins de xav contre vic pour voir cque ca fait
} else if (dataset == "spike") {
source("src/import_spike.R")
} else if (dataset == "pickle") {
source("src/import_pickle.R")
source("src/pickle.R")
}
if (!"serve_for_pt" %in% colnames(scores)) {
scores$serve_for_pt <- FALSE
}
source("src/update_scores.R")
source("src/plots.R")
source("src/recommend.R")
scores_stats(scores, players)
nrow(scores)
sum(scores$score_A + scores$score_B)
games_matchups(scores, players)
set.seed(2024L)
if (dataset == "ping") {
names_peu_freq <- scores_stats(scores, players)$games_played
names_peu_freq <- names(names_peu_freq[names_peu_freq <= seuil_freq])
scores <- scores[apply(scores[, 2:5], 1, function(x) !any(x %in% names_peu_freq)), ]
}
# generate_GIF_images(scores)
tmp <- show_ranking_history_dependancy(scores, dataset)
players <- tmp[[1]]
graph_data <- tmp[[2]]
clusters <- tmp[[3]]
# score history
ggplot(graph_data)+
theme_bw()+
geom_line(aes(x=date, y=score, col=player), linewidth=1)+
geom_point(aes(x=date, y=score, col=player), data=graph_data[graph_data$played, ])+
scale_color_discrete(breaks = graph_data[order(graph_data[graph_data[, 1] == max(graph_data[, 1]), "score"], decreasing = T), "player"])+
coord_cartesian(xlim = c(min(as.Date(scores$date)), max(as.Date(scores$date))))+
ylab("Elo")
show_current_ranking(clusters, scores, show_credibility = TRUE)
show_detailed_skill_per_player(players)
test_hyp(clusters)
show_current_ranking(clusters, scores, show_credibility = TRUE)
