ci = c(rep(0, 8), -55)
)
bets <- round(constrOptim(
rep(1, 8),
function(theta) {
theta <- round(theta, 2)
sum((round(theta * odds - sum(theta), 2) - my_payouts)^2, na.rm=T) + sum(theta[is.na(my_payouts)]^2)
},
grad=NULL,
ui = rbind(diag(8), rep(-1, 8)),
ci = c(rep(0, 8), -55)
)$par, 2)
round(bets * odds - sum(bets), 2)
my_payouts <- c(0, 15, 15, 15, 0, NA, NA, NA)+27
bets <- round(constrOptim(
rep(1, 8),
function(theta) {
theta <- round(theta, 2)
sum((round(theta * odds - sum(theta), 2) - my_payouts)^2, na.rm=T) + sum(theta[is.na(my_payouts)]^2)
},
grad=NULL,
ui = rbind(diag(8), rep(-1, 8)),
ci = c(rep(0, 8), -55)
)$par, 2)
round(bets * odds - sum(bets), 2)
tmp <- constrOptim(
rep(1, 8),
function(theta) {
theta <- round(theta, 2)
sum((round(theta * odds - sum(theta), 2) - my_payouts)^2, na.rm=T) + sum(theta[is.na(my_payouts)]^2)
},
grad=NULL,
ui = rbind(diag(8), rep(-1, 8)),
ci = c(rep(0, 8), -55)
)
(tmp <- constrOptim(
rep(1, 8),
function(theta) {
theta <- round(theta, 2)
sum((round(theta * odds - sum(theta), 2) - my_payouts)^2, na.rm=T) + sum(theta[is.na(my_payouts)]^2)
},
grad=NULL,
ui = rbind(diag(8), rep(-1, 8)),
ci = c(rep(0, 8), -55)
))
my_payouts <- c(0, 10, 10, 10, 0, NA, NA, NA)+27
#most valuable et >=0
arbitrage(odds, my_probs)
(tmp <- constrOptim(
rep(1, 8),
function(theta) {
theta <- round(theta, 2)
sum((round(theta * odds - sum(theta), 2) - my_payouts)^2, na.rm=T) + sum(theta[is.na(my_payouts)]^2)
},
grad=NULL,
ui = rbind(diag(8), rep(-1, 8)),
ci = c(rep(0, 8), -55)
))
bets <- round(tmp$par, 2)
round(bets * odds - sum(bets), 2)
my_payouts <- c(0, 5, 10, 10, 0, NA, NA, NA)+27
(tmp <- constrOptim(
rep(1, 8),
function(theta) {
theta <- round(theta, 2)
sum((round(theta * odds - sum(theta), 2) - my_payouts)^2, na.rm=T) + sum(theta[is.na(my_payouts)]^2)
},
grad=NULL,
ui = rbind(diag(8), rep(-1, 8)),
ci = c(rep(0, 8), -55)
))
my_probs
my_payouts <- c(0, 5, 10, 10, 0, NA, NA, NA)+27
(tmp <- constrOptim(
rep(1, 8),
function(theta) {
theta <- round(theta, 2)
sum((round(theta * odds - sum(theta), 2) - my_payouts)^2, na.rm=T) + sum(theta[is.na(my_payouts)]^2)
},
grad=NULL,
ui = rbind(diag(8), rep(-1, 8)),
ci = c(rep(0, 8), -55)
))
my_payouts <- c(0, 0, 10, 10, 0, NA, NA, NA)+27
(tmp <- constrOptim(
rep(1, 8),
function(theta) {
theta <- round(theta, 2)
sum((round(theta * odds - sum(theta), 2) - my_payouts)^2, na.rm=T) + sum(theta[is.na(my_payouts)]^2)
},
grad=NULL,
ui = rbind(diag(8), rep(-1, 8)),
ci = c(rep(0, 8), -55)
))
my_payouts <- c(0, 0, 5, 5, 0, NA, NA, NA)+27
(tmp <- constrOptim(
rep(1, 8),
function(theta) {
theta <- round(theta, 2)
sum((round(theta * odds - sum(theta), 2) - my_payouts)^2, na.rm=T) + sum(theta[is.na(my_payouts)]^2)
},
grad=NULL,
ui = rbind(diag(8), rep(-1, 8)),
ci = c(rep(0, 8), -55)
))
bets <- round(tmp$par, 2)
round(bets * odds - sum(bets), 2)
my_payouts <- c(0, 0, 10, 10, 0, NA, NA, NA)+20
(tmp <- constrOptim(
rep(1, 8),
function(theta) {
theta <- round(theta, 2)
sum((round(theta * odds - sum(theta), 2) - my_payouts)^2, na.rm=T) + sum(theta[is.na(my_payouts)]^2)
},
grad=NULL,
ui = rbind(diag(8), rep(-1, 8)),
ci = c(rep(0, 8), -55)
))
p_implicit <- function(odds) {
1/odds / sum(1/odds)
}
p_for_profitable <- function(odds) 1/odds
profit <- function(odds) {
(sum(1/odds) - 1) / sum(1/odds)
}
arbitrage <- function(odds, my_probs) {
stopifnot(abs(sum(my_probs) - 1) < 1/10000)
p <- p_implicit(odds)
matrix(c(my_probs, odds * my_probs - 1), nrow=2, byrow=T, dimnames = list(c("P", "Expect"), NULL))
}
my_payouts <- c(0, 10, 10, 10, NA, NA, 0, NA)+27
odds <- c(14, 8, 5.5, 6, 5, 6, 6, 12)
#voici mon modÃ¨le
p <- 0.45
p_home <- 0.05
p_final_away <- 0.03 #delta de probs si on veut win away, mais /2 si c'est pour win 4-2
my_probs <- c(
#WWWW
(p-p_home)^2*(p+p_home)^2,
#WWWLW
(p-p_home)^2*(p+p_home)*(1-(p+p_home))*(p-p_home-p_final_away)+
#WWLWW
(p-p_home)^2*(p+p_home)*(1-(p+p_home))*(p-p_home-p_final_away)+
#WLWWW
(p-p_home)*(1-(p-p_home))*(p+p_home)^2*(p-p_home-p_final_away)+
#LWWWW
(p-p_home)*(1-(p-p_home))*(p+p_home)^2*(p-p_home-p_final_away),
#WWWLLW
(p-p_home)^2*(p+p_home)*(1-(p+p_home))*(1-(p-p_home-p_final_away))*(p+p_home)+
#WWLWLW
(p-p_home)^2*(p+p_home)*(1-(p+p_home))*(1-(p-p_home-p_final_away))*(p+p_home)+
#WWLLWW
(p-p_home)^3*(1-(p+p_home))^2*(p+p_home)+
#WLWWLW
(p-p_home)*(1-(p-p_home))*(p+p_home)^2*(1-(p-p_home-p_final_away))*(p+p_home)+
#WLWLWW
(p-p_home)*(1-(p-p_home))*(p+p_home)*(1-(p+p_home))*(p-p_home)*(p+p_home)+
#WLLWWW
(p-p_home)*(1-(p-p_home))*(p+p_home)*(1-(p+p_home))*(p-p_home)*(p+p_home)+
#LWWWLW
(1-(p-p_home))*(p-p_home)*(p+p_home^2)*(1-(p-p_home-p_final_away))*(p+p_home)+
#LWWLWW
(1-(p-p_home))*(p-p_home)*(1-(p+p_home))*(p+p_home)*(p-p_home)*(p+p_home)+
#LWLWWW
(1-(p-p_home))*(p-p_home)*(1-(p+p_home))*(p+p_home)*(p-p_home)*(p+p_home)+
#LLWWWW
(1-(p-p_home))^2*(p+p_home)^2*(p-p_home)*(p+p_home),
#WWWLLLW
(p-p_home)^2*(p+p_home)*(1-(p+p_home))*(1-(p-p_home-p_final_away))*(1-(p+p_home))*(p-p_home)+
#WWLWLLW
(p-p_home)^2*(p+p_home)*(1-(p+p_home))*(1-(p-p_home-p_final_away))*(1-(p+p_home))*(p-p_home)+
#WWLLWLW
(p-p_home)^2*(1-(p+p_home))^2*(p-p_home)*(1-(p+p_home))*(p-p_home)+
#WWLLLWW
(p-p_home)^2*(1-(p+p_home))^2*(1-(p-p_home))*(p+p_home+p_final_away/2)*(p-p_home)+
#WLWWLLW
(p-p_home)*(1-(p-p_home))*(p+p_home)^2*(1-(p-p_home-p_final_away))*(1-(p+p_home))*(p-p_home)+
#WLWLWLW
(p-p_home)*(1-(p-p_home))*(p+p_home)*(1-(p+p_home))*(p-p_home)*(1-(p+p_home))*(p-p_home)+
#WLLWWLW
(p-p_home)*(1-(p-p_home))*(p+p_home)*(1-(p+p_home))*(p-p_home)*(1-(p+p_home))*(p-p_home)+
#WLWLLWW
(p-p_home)*(1-(p-p_home))*(p+p_home)*(1-(p+p_home))*(1-(p-p_home))*(p+p_home+p_final_away)*(p-p_home)+
#WLLWLWW
(p-p_home)*(1-(p-p_home))*(p+p_home)*(1-(p+p_home))*(1-(p-p_home))*(p+p_home+p_final_away)*(p-p_home)+
#WLLLWWW
(p-p_home)*(1-(p-p_home))*(1-(p+p_home))^2*(p-p_home)*(p+p_home+p_final_away)*(p-p_home)+
#LWWWLLW
(p-p_home)*(1-(p-p_home))*(p+p_home)^2*(1-(p-p_home-p_final_away))*(1-(p+p_home))*(p-p_home)+
#LWWLWLW
(p-p_home)*(1-(p-p_home))*(p+p_home)*(1-(p+p_home))*(p-p_home)*(1-(p+p_home))*(p-p_home)+
#LWLWWLW
(p-p_home)*(1-(p-p_home))*(p+p_home)*(1-(p+p_home))*(p-p_home)*(1-(p+p_home))*(p-p_home)+
#LWWLLWW
(p-p_home)*(1-(p-p_home))*(p+p_home)*(1-(p+p_home))*(1-(p-p_home))*(p+p_home+p_final_away/2)*(p-p_home)+
#LWLWLWW
(p-p_home)*(1-(p-p_home))*(p+p_home)*(1-(p+p_home))*(1-(p-p_home))*(p+p_home+p_final_away/2)*(p-p_home)+
#LWLLWWW
(p-p_home)*(1-(p-p_home))*(1-(p+p_home))^2*(p-p_home)*(p+p_home+p_final_away/2)*(p-p_home)+
#LLWWWLW
(1-(p-p_home))^2*(p+p_home)^2*(p-p_home)*(1-(p+p_home))*(p-p_home)+
#LLWWLWW
(1-(p-p_home))^2*(p+p_home)^2*(1-(p-p_home))*(p+p_home+p_final_away/2)*(p-p_home)+
#LLWLWWW
(1-(p-p_home))^2*(p+p_home)*(1-(p+p_home))*(p-p_home)*(p+p_home+p_final_away/2)*(p-p_home)+
#LLLWWWW
(1-(p-p_home))^2*(1-(p+p_home))*(p+p_home+p_final_away)*(p-p_home)*(p+p_home+p_final_away/2)*(p-p_home),
#WWWLLLL
(p-p_home)^2*(p+p_home)*(1-(p+p_home))*(1-(p-p_home-p_final_away))*(1-(p+p_home))*(1-(p-p_home))+
#WWLWLLL
(p-p_home)^2*(p+p_home)*(1-(p+p_home))*(1-(p-p_home-p_final_away))*(1-(p+p_home))*(1-(p-p_home))+
#WWLLWLL
(p-p_home)^2*(1-(p+p_home))^2*(p-p_home)*(1-(p+p_home))*(1-(p-p_home))+
#WWLLLWL
(p-p_home)^2*(1-(p+p_home))^2*(1-(p-p_home))*(p+p_home+p_final_away/2)*(1-(p-p_home))+
#WLWWLLL
(p-p_home)*(1-(p-p_home))*(p+p_home)^2*(1-(p-p_home-p_final_away))*(1-(p+p_home))*(1-(p-p_home))+
#WLWLWLL
(p-p_home)*(1-(p-p_home))*(p+p_home)*(1-(p+p_home))*(p-p_home)*(1-(p+p_home))*(1-(p-p_home))+
#WLLWWLL
(p-p_home)*(1-(p-p_home))*(p+p_home)*(1-(p+p_home))*(p-p_home)*(1-(p+p_home))*(1-(p-p_home))+
#WLWLLWL
(p-p_home)*(1-(p-p_home))*(p+p_home)*(1-(p+p_home))*(1-(p-p_home))*(p+p_home+p_final_away/2)*(1-(p-p_home))+
#WLLWLWL
(p-p_home)*(1-(p-p_home))*(p+p_home)*(1-(p+p_home))*(1-(p-p_home))*(p+p_home+p_final_away/2)*(1-(p-p_home))+
#WLLLWWL
(p-p_home)*(1-(p-p_home))*(1-(p+p_home))^2*(p-p_home)*(p+p_home+p_final_away/2)*(1-(p-p_home))+
#LWWWLLL
(1-(p-p_home))*(p-p_home)*(p+p_home)^2*(1-(p-p_home-p_final_away))*(1-(p+p_home))*(1-(p-p_home))+
#LWWLWLL
(1-(p-p_home))*(p-p_home)*(p+p_home)*(1-(p+p_home))*(p-p_home)*(1-(p+p_home))*(1-(p-p_home))+
#LWLWWLL
(1-(p-p_home))*(p-p_home)*(p+p_home)*(1-(p+p_home))*(p-p_home)*(1-(p+p_home))*(1-(p-p_home))+
#LWWLLWL
(1-(p-p_home))*(p-p_home)*(p+p_home)*(1-(p+p_home))*(1-(p-p_home))*(p+p_home+p_final_away/2)*(1-(p-p_home))+
#LWLWLWL
(1-(p-p_home))*(p-p_home)*(p+p_home)*(1-(p+p_home))*(1-(p-p_home))*(p+p_home+p_final_away/2)*(1-(p-p_home))+
#LWLLWWL
(1-(p-p_home))*(p-p_home)*(1-(p+p_home))^2*(p-p_home)*(p+p_home+p_final_away/2)*(1-(p-p_home))+
#LLWWWLL
(1-(p-p_home))^2*(p+p_home)^2*(p-p_home)*(1-(p+p_home))*(1-(p-p_home))+
#LLWWLWL
(1-(p-p_home))^2*(p+p_home)^2*(1-(p-p_home))*(p+p_home+p_final_away/2)*(1-(p-p_home))+
#LLWLWWL
(1-(p-p_home))^2*(p+p_home)*(1-(p+p_home))*(p-p_home)*(p+p_home+p_final_away/2)*(1-(p-p_home))+
#LLLWWWL
(1-(p-p_home))^2*(1-(p+p_home))*(p+p_home+p_final_away)*(p-p_home)*(p+p_home+p_final_away/2)*(1-(p-p_home)),
#LLLWWL
(1-(p-p_home))^2*(1-(p+p_home))*(p+p_home+p_final_away)*(p-p_home)*(1-(p+p_home+p_final_away/2))+
#LLWLWL
(1-(p-p_home))^2*(p+p_home)*(1-(p+p_home))*(p-p_home)*(1-(p+p_home+p_final_away/2))+
#LLWWLL
(1-(p-p_home))^2*(p+p_home)^2*(1-(p-p_home))*(1-(p+p_home+p_final_away/2))+
#LWLLWL
(1-(p-p_home))*(p-p_home)*(1-(p+p_home))^2*(p-p_home)*(1-(p+p_home+p_final_away/2))+
#LWLWLL
(1-(p-p_home))*(p-p_home)*(1-(p+p_home))*(p+p_home)*(1-(p-p_home))*(1-(p+p_home+p_final_away/2))+
#LWWLLL
(1-(p-p_home))*(p-p_home)*(1-(p+p_home))*(p+p_home)*(1-(p-p_home))*(1-(p+p_home+p_final_away/2))+
#WLLLWL
(1-(p-p_home))*(p-p_home)*(1-(p+p_home))^2*(p-p_home)*(1-(p+p_home+p_final_away/2))+
#WLLWLL
(p-p_home)*(1-(p-p_home))*(1-(p+p_home))*(p+p_home)*(1-(p-p_home))*(1-(p+p_home+p_final_away/2))+
#WLWLLL
(p-p_home)*(1-(p-p_home))*(1-(p+p_home))*(p+p_home)*(1-(p-p_home))*(1-(p+p_home+p_final_away/2))+
#WWLLLL
(p-p_home)^2*(1-(p+p_home))^2*(1-(p-p_home))*(1-(p+p_home))*(1-(p+p_home+p_final_away/2)),
#LLLWL
(1-(p-p_home))^2*(1-(p+p_home))*(p+p_home+p_final_away)*(1-(p-p_home))+
#LLWLL
(1-(p-p_home))^2*(p+p_home)*(1-(p+p_home))*(1-(p-p_home))+
#LWLLL
(1-(p-p_home))*(p-p_home)*(1-(p+p_home))^2*(1-(p-p_home))+
#WLLLL
(1-(p-p_home))*(p-p_home)*(1-(p+p_home))^2*(1-(p-p_home)),
#LLLL
(1-(p-p_home))^2*(1-(p+p_home))*(1-(p+p_home+p_final_away))
)
sum(my_probs)
#corriger les erreurs potentielles
my_probs <- my_probs/sum(my_probs)
my_payouts <- c(0, 10, 10, 10, NA, NA, 0, NA)+27
#most valuable et >=0
arbitrage(odds, my_probs)
my_payouts <- c(0, 5, 10, 10, NA, NA, 0, NA)+27
#most valuable et >=0
arbitrage(odds, my_probs)
(tmp <- constrOptim(
rep(1, 8),
function(theta) {
theta <- round(theta, 2)
sum((round(theta * odds - sum(theta), 2) - my_payouts)^2, na.rm=T) + sum(theta[is.na(my_payouts)]^2)
},
grad=NULL,
ui = rbind(diag(8), rep(-1, 8)),
ci = c(rep(0, 8), -55)
))
bets <- round(tmp$par, 2)
round(bets * odds - sum(bets), 2)
bets
round(bets * odds - sum(bets), 2)
(tmp <- constrOptim(
rep(1, 8),
function(theta) {
sum((theta * odds - sum(theta) - my_payouts)^2, na.rm=T) + sum(theta[is.na(my_payouts)]^2)
},
grad=NULL,
ui = rbind(diag(8), rep(-1, 8)),
ci = c(rep(0, 8), -55)
))
bets <- round(tmp$par, 2)
bets
round(bets * odds - sum(bets), 2)
theta
theta=tmp$par
sum((theta * odds - sum(theta) - my_payouts)^2, na.rm=T) + sum(theta[is.na(my_payouts)]^2)
theta[is.na(my_payouts)]
sum(theta[is.na(my_payouts)]^2)
theta * odds - sum(theta)
theta * odds - sum(theta) - my_payouts
(theta * odds - sum(theta) - my_payouts)^2
my_payouts <- c(0, 5, 10, 10, NA, NA, -10, NA)+27
#most valuable et >=0
arbitrage(odds, my_probs)
(tmp <- constrOptim(
rep(1, 8),
function(theta) {
sum((theta * odds - sum(theta) - my_payouts)^2, na.rm=T) + sum(theta[is.na(my_payouts)]^2)
},
grad=NULL,
ui = rbind(diag(8), rep(-1, 8)),
ci = c(rep(0, 8), -55)
))
bets <- round(tmp$par, 2)
round(bets * odds - sum(bets), 2)
my_payouts <- c(0, 5, 10, 10, NA, NA, -10, NA)+10
#most valuable et >=0
arbitrage(odds, my_probs)
(tmp <- constrOptim(
rep(1, 8),
function(theta) {
sum((theta * odds - sum(theta) - my_payouts)^2, na.rm=T) + sum(theta[is.na(my_payouts)]^2)
},
grad=NULL,
ui = rbind(diag(8), rep(-1, 8)),
ci = c(rep(0, 8), -55)
))
my_payouts <- c(0, 5, 8, 8, NA, NA, -10, NA)+27
#most valuable et >=0
arbitrage(odds, my_probs)
(tmp <- constrOptim(
rep(1, 8),
function(theta) {
sum((theta * odds - sum(theta) - my_payouts)^2, na.rm=T) + sum(theta[is.na(my_payouts)]^2)
},
grad=NULL,
ui = rbind(diag(8), rep(-1, 8)),
ci = c(rep(0, 8), -55)
))
my_payouts <- c(0, 5, 8, 8, NA, NA, -10, NA)+27
my_payouts
my_payouts <- c(0, 2, 5, 5, NA, NA, -10, NA)+27
#most valuable et >=0
arbitrage(odds, my_probs)
(tmp <- constrOptim(
rep(1, 8),
function(theta) {
sum((theta * odds - sum(theta) - my_payouts)^2, na.rm=T) + sum(theta[is.na(my_payouts)]^2)
},
grad=NULL,
ui = rbind(diag(8), rep(-1, 8)),
ci = c(rep(0, 8), -55)
))
#most valuable et >=0
arbitrage(odds, my_probs)
(tmp <- constrOptim(
rep(1, 8),
function(theta) {
sum((theta * odds - sum(theta) - my_payouts)^2, na.rm=T) + sum(theta[is.na(my_payouts)]^2)
},
grad=NULL,
ui = rbind(diag(8), rep(-1, 8)),
ci = c(rep(0, 8), -55)
))
bets <- round(tmp$par, 2)
bets
round(bets * odds - sum(bets), 2)
odds
profit(odds)
profit(c(1.74, 2.05))
bets <- c(27, 5)
bets[1] * 2.05 - sum(bets)
odds
odds[8]
odds[7]
bets[2] * odds[7] - sum(bets)
bets
round(bets * c(2.05, odds[7], 1) - sum(bets), 2)
bets <- c(27, 5, 0)
bets[1] * 2.05 - sum(bets)
bets[2] * odds[7] - sum(bets)
round(bets * c(2.05, odds[7], 1) - sum(bets), 2)
bets
(odds[7]-1)*bets[2]*2.05 - odds[7]*bets[2]
(odds[7]-1)*bets[2]*2.05 - odds[7]*bets[2]
(odds[7]-1)*bets[2]
bets <- c(25, 5, 0)
bets[1] * 2.05 - sum(bets)
bets[2] * odds[7] - sum(bets)
round(bets * c(2.05, odds[7], 1) - sum(bets), 2)
bets
(odds[7]-1)*bets[2]*2.05 - odds[7]*b
(odds[7]-1)*bets[2]*2.05 - odds[7]*bets[2]
(odds[7]-1)*bets[2]
#most valuable et >=0
arbitrage(odds, my_probs)
27/5
bets <- c(27, 5.4, 0) #(odds[7]-1)*bets[2]
bets[1] * 2.05 - sum(bets)
bets[2] * odds[7] - sum(bets)
round(bets * c(2.05, odds[7], 1) - sum(bets), 2)
my_payouts <- c(-10, 2, 5, 5, NA, NA, -10, NA)+27
#most valuable et >=0
arbitrage(odds, my_probs)
(tmp <- constrOptim(
rep(1, 8),
function(theta) {
sum((theta * odds - sum(theta) - my_payouts)^2, na.rm=T) + sum(theta[is.na(my_payouts)]^2)
},
grad=NULL,
ui = rbind(diag(8), rep(-1, 8)),
ci = c(rep(0, 8), -55)
))
my_payouts <- c(-10, 0, 5, 5, NA, NA, -10, NA)+27
#most valuable et >=0
arbitrage(odds, my_probs)
(tmp <- constrOptim(
rep(1, 8),
function(theta) {
sum((theta * odds - sum(theta) - my_payouts)^2, na.rm=T) + sum(theta[is.na(my_payouts)]^2)
},
grad=NULL,
ui = rbind(diag(8), rep(-1, 8)),
ci = c(rep(0, 8), -55)
))
bets <- round(tmp$par, 2)
round(bets * odds - sum(bets), 2)
bets
round(bets * odds - sum(bets), 2)
profit(c(1.74, 2.05))
my_payouts <- c(-10, 0, 4, 4, NA, NA, -10, NA)+27
#most valuable et >=0
arbitrage(odds, my_probs)
(tmp <- constrOptim(
rep(1, 8),
function(theta) {
sum((theta * odds - sum(theta) - my_payouts)^2, na.rm=T) + sum(theta[is.na(my_payouts)]^2)
},
grad=NULL,
ui = rbind(diag(8), rep(-1, 8)),
ci = c(rep(0, 8), -55)
))
bets <- round(tmp$par, 2)
round(bets * odds - sum(bets), 2)
my_payouts <- c(-10, 0, 4, 4, NA, NA, -15, NA)+27
#most valuable et >=0
arbitrage(odds, my_probs)
(tmp <- constrOptim(
rep(1, 8),
function(theta) {
sum((theta * odds - sum(theta) - my_payouts)^2, na.rm=T) + sum(theta[is.na(my_payouts)]^2)
},
grad=NULL,
ui = rbind(diag(8), rep(-1, 8)),
ci = c(rep(0, 8), -55)
))
bets <- round(tmp$par, 2)
round(bets * odds - sum(bets), 2)
bets <- c(27, 5.4, 0) #(odds[7]-1)*bets[2]
bets[1] * 2.05 - sum(bets)
bets[2] * odds[7] - sum(bets)
round(bets * c(2.05, odds[7], 1) - sum(bets), 2)
bets <- c(45, 9, 0) #(odds[7]-1)*bets[2]
bets[1] * 2.05 - sum(bets)
bets[2] * odds[7] - sum(bets)
round(bets * c(2.05, odds[7], 1) - sum(bets), 2)
bets <- c(41.65, 8.33, 0) #(odds[7]-1)*bets[2]
bets[1] * 2.05 - sum(bets)
bets[2] * odds[7] - sum(bets)
round(bets * c(2.05, odds[7], 1) - sum(bets), 2)
40/6
6.67*5
bets <- c(33.33, 6.67, 0) #(odds[7]-1)*bets[2]
bets[1] * 2.05 - sum(bets)
bets[2] * odds[7] - sum(bets)
round(bets * c(2.05, odds[7], 1) - sum(bets), 2)
50/6
8.33*6
8.333*5
bets <- c(41.65, 8.33, 0) #(odds[7]-1)*bets[2]
bets[1] * 2.05 - sum(bets)
bets[2] * odds[7] - sum(bets)
round(bets * c(2.05, odds[7], 1) - sum(bets), 2)
getwd()
setwd("../Desktop/DOCUMENTS/ActuRank")
include_exact_points <- FALSE
dim_len_mu <- 3
source("src/import.R")
source("src/update_scores.R")
source("src/plots.R")
source("src/recommend.R")
tmp <- show_ranking_history_exact(scores=scores)
